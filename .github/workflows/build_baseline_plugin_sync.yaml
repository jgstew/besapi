---
name: build_baseline_plugin_sync

on:
  push:
    paths:
      - ".github/workflows/build_baseline_plugin_sync.yaml"
      - "examples/baseline_sync_plugin.py"
    branches:
      - master

env:
  script_name: baseline_sync_plugin

jobs:
  build_baseline_plugin_sync:
    # needs: build_baseline_plugin_rhel
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022, windows-11-arm, ubuntu-24.04-arm]
        # https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: update pip
        run: python -m pip install --upgrade pip

      - name: Install build tools
        run: pip install --upgrade setuptools wheel build pyinstaller besapi

      # - name: Install requirements
      #   shell: bash
      #   run: if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Read VERSION file
        id: getversion
        shell: bash
        run: echo "$(python ./setup.py --version)"

      - name: Run Tests - Source
        run: python tests/tests.py

      - name: Test pyinstaller build ${{ env.script_name }}
        run: pyinstaller --clean --noconfirm --collect-all besapi ./examples/${{ env.script_name }}.py

      - name: set executable
        if: ${{ runner.os == 'Linux' }}
        run: chmod +x ./dist/${{ env.script_name }}/${{ env.script_name }}

      - name: test plugin help
        run: ./dist/${{ env.script_name }}/${{ env.script_name }} --help

      # - name: copy example config
      #   shell: bash
      #   run: cp ./examples/baseline_plugin.config.yaml ./dist/baseline_plugin/baseline_plugin.config.yaml

      - name: create dist zip linux
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: cd dist/${{ env.script_name }} && zip -r -o ${{ env.script_name }}_dist_`uname -s`-`uname -m`.zip *

      - name: create dist zip win
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          cd dist/${{ env.script_name }} && Compress-Archive -Path * -DestinationPath ${{ env.script_name }}_dist_Windows-$( ([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture).ToString().ToLower() ).zip

      - name: get zip name linux
        if: ${{ runner.os == 'Linux' }}
        id: get_zip_name_linux
        shell: bash
        run: echo "ZIP_NAME=${{ env.script_name }}_dist_`uname -s`-`uname -m`" >> $GITHUB_ENV

      - name: get zip name windows
        if: ${{ runner.os == 'Windows' }}
        id: get_zip_name_win
        shell: pwsh
        run: |
          $arch = ([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture).ToString().ToLower()
          $outputString = "ZIP_NAME=${{ env.script_name }}_dist_Windows-${arch}"
          Add-Content -Path $env:GITHUB_ENV -Value $outputString

      - name: upload built ${{ env.script_name }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: dist/${{ env.script_name }}/${{ env.script_name }}_dist_*.zip
          if-no-files-found: error

  build_baseline_plugin_rhel:
    runs-on: ubuntu-24.04
    container:
      image: "redhat/ubi8:latest"
    steps:
      - uses: actions/checkout@v4

      - name: Install Python3 and pyinstaller deps
        run: dnf --assumeyes install python3.12 python3.12-pip binutils zip

      - name: get python version
        run: python3.12 --version

      - name: update pip
        run: python3.12 -m pip install --upgrade pip

      - name: Install build tools
        run: python3.12 -m pip install --upgrade setuptools wheel build pyinstaller besapi

      # - name: Install requirements
      #   shell: bash
      #   run: if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Read VERSION file
        id: getversion
        shell: bash
        run: echo "$(python3.12 ./setup.py --version)"

      - name: Run Tests - Source
        run: python3.12 tests/tests.py

      - name: Test pyinstaller build baseline_sync_plugin
        run: pyinstaller --clean --noconfirm --collect-all besapi ./examples/${{ env.script_name }}.py

      - name: set executable
        if: ${{ runner.os == 'Linux' }}
        run: chmod +x ./dist/baseline_sync_plugin/baseline_sync_plugin

      - name: test plugin help
        run: ./dist/baseline_sync_plugin/baseline_sync_plugin --help

      # - name: copy example config
      #   shell: bash
      #   run: cp ./examples/baseline_plugin.config.yaml ./dist/baseline_plugin/baseline_plugin.config.yaml

      - name: Install zip command
        run: dnf --assumeyes install zip

      - name: create dist zip linux
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: cd dist/${{ env.script_name }} && zip -r -o ${{ env.script_name }}_dist_`uname -s`-`uname -m`.zip *

      - name: create dist zip win
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          cd dist/${{ env.script_name }} && Compress-Archive -Path * -DestinationPath ${{ env.script_name }}_dist_Windows-$( ([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture).ToString().ToLower() ).zip

      - name: get zip name linux
        if: ${{ runner.os == 'Linux' }}
        id: get_zip_name_linux
        shell: bash
        run: echo "ZIP_NAME=${{ env.script_name }}_dist_`uname -s`-`uname -m`" >> $GITHUB_ENV

      - name: get zip name windows
        if: ${{ runner.os == 'Windows' }}
        id: get_zip_name_win
        shell: pwsh
        run: |
          $arch = ([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture).ToString().ToLower()
          $outputString = "ZIP_NAME=${{ env.script_name }}_dist_Windows-${arch}"
          Add-Content -Path $env:GITHUB_ENV -Value $outputString

      - name: upload built ${{ env.script_name }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: dist/${{ env.script_name }}/${{ env.script_name }}_dist_*.zip
          if-no-files-found: error

  test_baseline_plugin_rhel:
    needs: build_baseline_plugin_rhel
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container-image:
          ["redhat/ubi8:latest", "redhat/ubi9:latest", "ubuntu:latest"]
    container:
      image: ${{ matrix.container-image }}
    steps:
      - name: Download ${{ env.script_name }} artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.script_name }}_dist_Linux-x86_64
          path: ./downloaded_artifact

      - name: List downloaded files
        run: ls -l ./downloaded_artifact

      - name: Install unzip command
        if: ${{ contains (matrix.container-image, 'redhat/ubi') }}
        run: dnf --assumeyes install unzip

      - name: Install unzip command
        if: ${{ contains (matrix.container-image, 'ubuntu') }}
        run: apt-get update && apt-get install -y unzip

      # Example: Unzip and check contents
      - name: Unzip artifact
        run: unzip ./downloaded_artifact/${{ env.script_name }}_dist_Linux-x86_64.zip

      - name: List files
        run: ls -l .

      - name: Test plugin help
        run: ./${{ env.script_name }} --help
